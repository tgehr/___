/+
// TODO list:

- import declarations
// - UFCS
// - Optional parens on function calls
- Struct literals
- Static struct data
- debug declarations
- Some of the built-in array operations
- Missing object.d (no string, size_t, hash_t alias.)
- (static) foreach
- __ctfe
+/

//Written in the D programming language
/**
    CTFE benchmark, stresses both perfomance and memory usage.
    Codepoint set and trie are tools for efficient character class manipulation. 
    The code does typical Unicode character sets manipulations.
*/

/+import std.algorithm, std.range, std.typetuple, std.format;
import core.bitop;

enum Iterations = 1;

// @safe:
// public:

//wrappers for CTFE
@trusted void insertInPlaceAlt(T)(ref T[] arr, size_t idx, T[] items...)
{
    if(__ctfe)
        arr = arr[0..idx] ~ items ~ arr[idx..$];
    else
        insertInPlace(arr, idx, items);
}

//ditto
@trusted void replaceInPlaceAlt(T)(ref T[] arr, size_t from, size_t to, T[] items...)
in
{
    assert(to >= from);
}
body
{
    if(__ctfe)
        arr = arr[0..from]~items~arr[to..$];
    else //@@@BUG@@@ in replaceInPlace? symptoms being sudden ZEROs in array
    {
        //replaceInPlace(arr, from, to, items);
        size_t window = to - from, ilen = items.length;
        if(window >= ilen)
        {
            size_t delta = window - ilen;
            arr[from .. from+ilen] = items[0..$];
            if(delta)
            {//arrayops won't do - aliasing
                for(size_t i = from+ilen; i < arr.length-delta; i++)
                    arr[i] = arr[i+delta];
                arr.length -= delta;
            }
        }
        else
        {
            size_t delta = ilen - window, old = arr.length;
            arr.length += delta;
            //arrayops won't do - aliasing
            for(size_t i = old - 1; i != to-1; i--)
                arr[i+delta] = arr[i];
            arr[from .. from+ilen] = items[0..$];
        }
    }
}

//$(D Interval)  represents an interval of codepoints: [a,b).
struct Interval
{
    uint begin, end;

    ///Create interval containig a single character $(D ch).
    this(dchar ch)
    {
        begin = ch;
        end = ch+1;
    }

    /++
        Create Interval from inclusive range [$(D a),$(D b)]. Contrary to internal structure, inclusive is chosen for interface.
        The reason for this is usability e.g. it's would force user to type the unwieldy Interval('a','z'+1) all over the place.
    +/
    this(dchar a, dchar b)
    {
        assert(a <= b);
        begin = a;
        end = b+1;
    }

    ///
    @trusted string toString()const
    {
        auto s = appender!string();
        formattedWrite(s,"%s..%s", begin, end);
        return s.data;
    }

}

/+
    $(D CodepointSet) is a data structure for manipulating sets
    of Unicode codepoints in an efficient manner.
    Instances of CodepointSet have half-reference semantics akin to dynamic arrays,
    to obtain a unique copy use $(D dup).
+/
struct CodepointSet
{
    enum uint endOfRange = 0x110000;
    uint[] ivals;

    //Add an $(D interval) of codepoints to this set.
    @trusted ref CodepointSet add(Interval inter)
    {
        debug(fred_charset) writeln("Inserting ",inter);
        if(ivals.empty)
        {
            insertInPlaceAlt(ivals, 0, inter.begin, inter.end);
            return this;
        }//assumeSorted is @system
        auto svals = assumeSorted(ivals);
        auto s = svals.lowerBound(inter.begin).length;
        auto e = s+svals[s..svals.length].lowerBound(inter.end).length;
        debug(fred_charset)  writeln("Indexes: ", s,"  ", e);
        if(s & 1)
        {
            inter.begin = ivals[s-1];
            s ^= 1;
        }
        if(e & 1)
        {
            inter.end = ivals[e];
            e += 1;
        }
        else //e % 2 == 0
        {
            if(e < ivals.length && inter.end == ivals[e])
            {
                    inter.end = ivals[e+1];
                    e+=2;
            }
        }
        debug(fred_charset)
            for(size_t i=1;i<ivals.length; i++)
                assert(ivals[i-1] < ivals[i]);
        replaceInPlaceAlt(ivals, s, e, inter.begin ,inter.end);
        return this;
    }

    //Add a codepoint $(D ch) to this set.
    ref CodepointSet add(dchar ch){ add(Interval(cast(uint)ch)); return this; }

    //Add $(D set) in this set.
    //Algebra: this = this | set.
    ref CodepointSet add(immutable CodepointSet set)
    {
        debug(fred_charset) writef ("%s || %s --> ", ivals, set.ivals);
        for(size_t i=0; i<set.ivals.length; i+=2)
            add(Interval(set.ivals[i], set.ivals[i+1]-1));
        debug(fred_charset) writeln(ivals);
        return this;
    }

    //this = !this (i.e. [^...] in regex syntax)
    @trusted ref CodepointSet negate()
    {
        if(empty)
        {
            insertInPlaceAlt(ivals, 0, 0u, endOfRange);
            return this;
        }
        if(ivals[0] != 0)
            insertInPlaceAlt(ivals, 0, 0u);
        else
        {
            for(size_t i=1; i<ivals.length; i++)
                ivals[i-1] = ivals[i];//moveAll(ivals[1..$], ivals[0..$-1]);
            ivals = ivals[0..$-1];
            if(!__ctfe)
                assumeSafeAppend(ivals);
        }
        if(ivals[$-1] != endOfRange)
            insertInPlaceAlt(ivals, ivals.length, endOfRange);
        else
        {
            ivals = ivals[0..$-1] ;
            if(!__ctfe)
                assumeSafeAppend(ivals);
        }
        assert(!(ivals.length & 1));
        return this;
    }

    /+
        Test if ch is present in this set, in $(BIGOH LogN) operations on number
        of $(U intervals) in this set.
    +/
    @trusted bool opIndex(dchar ch)const
    {
        auto svals = assumeSorted!"a <= b"(ivals);
        auto s = svals.lowerBound(cast(uint)ch).length;
        return s & 1;
    }

    //Test if this set is empty.
    @property bool empty() const pure nothrow {   return ivals.empty; }

    //Write out in regular expression style [\uxxxx-\uyyyy...].
    @trusted void printUnicodeSet(R)(R sink) const
        if(isOutputRange!(R, const(char)[]))
    {
        sink("[");
        for(uint i=0;i<ivals.length; i+=2)
            if(ivals[i] + 1 == ivals[i+1])
                formattedWrite(sink, "\\U%08x", ivals[i]);
            else
                formattedWrite(sink, "\\U%08x-\\U%08x", ivals[i], ivals[i+1]-1);
        sink("]");
    }

    //Deep copy this set.
    @property CodepointSet dup() const
    {
        return CodepointSet(ivals.dup);
    }

    //Full covered length from first codepoint to the last one.
    @property uint extent() const
    {
	    return .empty(ivals) ? 0 : ivals[$-1] - ivals[0];
    }

    //Number of codepoints stored in this set.
    @property uint chars() const
    {
        //CTFE workaround
        uint ret;
        for(uint i=0; i<ivals.length; i+=2)
            ret += ivals[i+1] - ivals[i];
        return ret;
    }

    //Troika for built-in hash maps.
    bool opEquals(ref const CodepointSet set) const
    {
        return ivals == set.ivals;
    }

    //ditto
    int opCmp(ref const CodepointSet set) const
    {
        return cmp(cast(const(uint)[])ivals, cast(const(uint)[])set.ivals);
    }

    //ditto
    hash_t toHash() const pure nothrow @safe
    {
        hash_t hash = 5381+7*ivals.length;
        if(!empty)
            hash = 31*ivals[0] + 17*ivals[$-1];
        return hash;
    }

    //Random access range of intervals in this set.
    @trusted @property auto byInterval() const
    {
        const(uint)[] hack = ivals;
        return cast(const(Interval)[])hack;
    }
}

/*
    $(D CodepointTrie) is 1-level  $(LUCKY Trie) of codepoints.
    Primary use case is to convert a previously obtained CodepointSet
    in order to speed up subsequent element lookup.

    ---
        auto input = ...;
        Charset set;
        set.add(unicodeAlphabetic).add('$').add('#');
        auto lookup = CodepointTrie!8(set);
        int count;
        foreach(dchar ch; input)
            if(lookup[ch])
                count++;
    ---
    $(D prefixBits) parameter controls number of bits used to index last level
    and provided for tuning to a specific applications.
    A default parameter of 8 works best in common cases though.
*/
struct CodepointTrie(uint prefixBits)
    if(prefixBits > 4)
{
    static if(size_t.sizeof == 4)
        enum unitBits = 2;
    else static if(size_t.sizeof == 8)
        enum unitBits = 3;
    else
        static assert(0);
    enum prefixWordBits = prefixBits-unitBits, prefixSize=1<<prefixBits,
        prefixWordSize = 1<<(prefixWordBits),
        bitTestShift = prefixBits+3, prefixMask = (1<<prefixBits)-1;
    size_t[] data;
    ushort[] indexes;
    bool negative;

    //debugging tool
/+    @trusted debug(fred_trie) static void printBlock(in size_t[] block)
    {//@@@BUG@@@ write is @system
        for(uint k=0; k<prefixSize; k++)
        {
            if((k & 15) == 0)
                write(" ");
            if((k & 63) == 0)
                writeln();
            writef("%d", bt(block.ptr, k) != 0);
        }
        writeln();
    }

    //ditto
    @trusted debug(fred_trie) void desc() const
    {//@@@BUG@@@ writeln is @system
        writeln(indexes);
        writeln("***Blocks***");
        for(uint i=0; i<data.length; i+=prefixWordSize)
        {
            printBlock(data[i .. i+prefixWordSize]);
            writeln("---");
        }
    }+/

public:
    //Create a trie from CodepointSet $(D set).
    @trusted this(in CodepointSet s)
    {
        if(s.empty)
            return;
        const(CodepointSet) set = s.chars > 500_000 ? (negative=true, s.dup.negate()) : s;
        uint bound = 0;//set up on first iteration
        ushort emptyBlock = ushort.max;
        auto ivals  = set.ivals;
        size_t[prefixWordSize] page;
        for(uint i=0; i<CodepointSet.endOfRange; i+= prefixSize)
        {
            if(i+prefixSize > ivals[bound] || emptyBlock == ushort.max)//avoid empty blocks if we have one already
            {
                bool flag = true;
            L_Prefix_Loop:
                for(uint j=0; j<prefixSize; j++)
                {
                    while(i+j >= ivals[bound+1])
                    {
                        bound += 2;
                        if(bound == ivals.length)
                        {
                            bound = uint.max;
                            if(flag)//not a single one set so far
                                return;
                            //no more bits in the whole set, but need to add the last bucket
                            break L_Prefix_Loop;
                        }
                    }
                    if(i+j >= ivals[bound])
                    {
                        enum mask = (1<<(3+unitBits))-1;
                        page[j>>(3+unitBits)]
                            |=  cast(size_t)1<<(j & mask);
                        flag = false;
                    }
                }

                debug(fred_trie)
                {
                   printBlock(page);
                }
                uint npos;
                for(npos=0;npos<data.length;npos+=prefixWordSize)
                    if(equal(page[], data[npos .. npos+prefixWordSize]))
                    {
                        indexes ~= cast(ushort)(npos>>prefixWordBits);
                        break;
                    }
                if(npos == data.length)
                {
                    indexes ~= cast(ushort)(data.length>>prefixWordBits);
                    data ~= page;
                    if(flag)
                        emptyBlock = indexes[$-1];
                }
                if(bound == uint.max)
                    break;
                page[] = 0;
            }
            else//fast reroute whole blocks to an empty one
            {
                indexes ~= emptyBlock;
            }
        }
    }

    //Test if contains $(D ch).
    @trusted bool opIndex(dchar ch) const
    {
        assert(ch < 0x110000);
        uint ind = ch>>prefixBits;
        if(ind >= indexes.length)
            return negative;
        return cast(bool)bt(data.ptr, (indexes[ind]<<bitTestShift)+(ch&prefixMask)) ^ negative;
        version(none)//is in fact slower (on AMD Phenom)
        {
            auto ptr = cast(const(ubyte)*)data.ptr;
            return ((ptr[(cast(size_t)indexes[ind]<<prefixBits) + ((ch&prefixMask)>>3)]>>(ch&7))&1) ^ negative;
        }
    }

}

alias CodepointTrie!8 Trie;

template Iota(int N){
	static if(N > 1)
		alias TypeTuple!(Iota!(N-1), N) Iota;
	else
		alias TypeTuple!N Iota;

}

void main()
{
	void ctTest(int i)(){
		enum word = CodepointSet.init.add(unicodeAlphabetic).add(unicodeMn).add(unicodeMc)
        		.add(unicodeMe).add(unicodeNd).add(unicodePc);

		static wordTrie = Trie(word);
		static nonWordTrie = Trie(word.negate());
		static upperCaseTrie = Trie(unicodeLu);
	}
	foreach(v; Iota!(Iterations)){
		ctTest!v();
	}
}



//============================================================================
//                          TABLES AND STATIC DATA
//============================================================================

immutable(CodepointSet) unicodeLu = CodepointSet([
    0x00041, 0x0005b,
    0x000c0, 0x000d7,
    0x000d8, 0x000df,
    0x00100, 0x00101,
    0x00102, 0x00103,
    0x00104, 0x00105,
    0x00106, 0x00107,
    0x00108, 0x00109,
    0x0010a, 0x0010b,
    0x0010c, 0x0010d,
    0x0010e, 0x0010f,
    0x00110, 0x00111,
    0x00112, 0x00113,
    0x00114, 0x00115,
    0x00116, 0x00117,
    0x00118, 0x00119,
    0x0011a, 0x0011b,
    0x0011c, 0x0011d,
    0x0011e, 0x0011f,
    0x00120, 0x00121,
    0x00122, 0x00123,
    0x00124, 0x00125,
    0x00126, 0x00127,
    0x00128, 0x00129,
    0x0012a, 0x0012b,
    0x0012c, 0x0012d,
    0x0012e, 0x0012f,
    0x00130, 0x00131,
    0x00132, 0x00133,
    0x00134, 0x00135,
    0x00136, 0x00137,
    0x00139, 0x0013a,
    0x0013b, 0x0013c,
    0x0013d, 0x0013e,
    0x0013f, 0x00140,
    0x00141, 0x00142,
    0x00143, 0x00144,
    0x00145, 0x00146,
    0x00147, 0x00148,
    0x0014a, 0x0014b,
    0x0014c, 0x0014d,
    0x0014e, 0x0014f,
    0x00150, 0x00151,
    0x00152, 0x00153,
    0x00154, 0x00155,
    0x00156, 0x00157,
    0x00158, 0x00159,
    0x0015a, 0x0015b,
    0x0015c, 0x0015d,
    0x0015e, 0x0015f,
    0x00160, 0x00161,
    0x00162, 0x00163,
    0x00164, 0x00165,
    0x00166, 0x00167,
    0x00168, 0x00169,
    0x0016a, 0x0016b,
    0x0016c, 0x0016d,
    0x0016e, 0x0016f,
    0x00170, 0x00171,
    0x00172, 0x00173,
    0x00174, 0x00175,
    0x00176, 0x00177,
    0x00178, 0x0017a,
    0x0017b, 0x0017c,
    0x0017d, 0x0017e,
    0x00181, 0x00183,
    0x00184, 0x00185,
    0x00186, 0x00188,
    0x00189, 0x0018c,
    0x0018e, 0x00192,
    0x00193, 0x00195,
    0x00196, 0x00199,
    0x0019c, 0x0019e,
    0x0019f, 0x001a1,
    0x001a2, 0x001a3,
    0x001a4, 0x001a5,
    0x001a6, 0x001a8,
    0x001a9, 0x001aa,
    0x001ac, 0x001ad,
    0x001ae, 0x001b0,
    0x001b1, 0x001b4,
    0x001b5, 0x001b6,
    0x001b7, 0x001b9,
    0x001bc, 0x001bd,
    0x001c4, 0x001c5,
    0x001c7, 0x001c8,
    0x001ca, 0x001cb,
    0x001cd, 0x001ce,
    0x001cf, 0x001d0,
    0x001d1, 0x001d2,
    0x001d3, 0x001d4,
    0x001d5, 0x001d6,
    0x001d7, 0x001d8,
    0x001d9, 0x001da,
    0x001db, 0x001dc,
    0x001de, 0x001df,
    0x001e0, 0x001e1,
    0x001e2, 0x001e3,
    0x001e4, 0x001e5,
    0x001e6, 0x001e7,
    0x001e8, 0x001e9,
    0x001ea, 0x001eb,
    0x001ec, 0x001ed,
    0x001ee, 0x001ef,
    0x001f1, 0x001f2,
    0x001f4, 0x001f5,
    0x001f6, 0x001f9,
    0x001fa, 0x001fb,
    0x001fc, 0x001fd,
    0x001fe, 0x001ff,
    0x00200, 0x00201,
    0x00202, 0x00203,
    0x00204, 0x00205,
    0x00206, 0x00207,
    0x00208, 0x00209,
    0x0020a, 0x0020b,
    0x0020c, 0x0020d,
    0x0020e, 0x0020f,
    0x00210, 0x00211,
    0x00212, 0x00213,
    0x00214, 0x00215,
    0x00216, 0x00217,
    0x00218, 0x00219,
    0x0021a, 0x0021b,
    0x0021c, 0x0021d,
    0x0021e, 0x0021f,
    0x00220, 0x00221,
    0x00222, 0x00223,
    0x00224, 0x00225,
    0x00226, 0x00227,
    0x00228, 0x00229,
    0x0022a, 0x0022b,
    0x0022c, 0x0022d,
    0x0022e, 0x0022f,
    0x00230, 0x00231,
    0x00232, 0x00233,
    0x0023a, 0x0023c,
    0x0023d, 0x0023f,
    0x00241, 0x00242,
    0x00243, 0x00247,
    0x00248, 0x00249,
    0x0024a, 0x0024b,
    0x0024c, 0x0024d,
    0x0024e, 0x0024f,
    0x00370, 0x00371,
    0x00372, 0x00373,
    0x00376, 0x00377,
    0x00386, 0x00387,
    0x00388, 0x0038b,
    0x0038c, 0x0038d,
    0x0038e, 0x00390,
    0x00391, 0x003a2,
    0x003a3, 0x003ac,
    0x003cf, 0x003d0,
    0x003d2, 0x003d5,
    0x003d8, 0x003d9,
    0x003da, 0x003db,
    0x003dc, 0x003dd,
    0x003de, 0x003df,
    0x003e0, 0x003e1,
    0x003e2, 0x003e3,
    0x003e4, 0x003e5,
    0x003e6, 0x003e7,
    0x003e8, 0x003e9,
    0x003ea, 0x003eb,
    0x003ec, 0x003ed,
    0x003ee, 0x003ef,
    0x003f4, 0x003f5,
    0x003f7, 0x003f8,
    0x003f9, 0x003fb,
    0x003fd, 0x00430,
    0x00460, 0x00461,
    0x00462, 0x00463,
    0x00464, 0x00465,
    0x00466, 0x00467,
    0x00468, 0x00469,
    0x0046a, 0x0046b,
    0x0046c, 0x0046d,
    0x0046e, 0x0046f,
    0x00470, 0x00471,
    0x00472, 0x00473,
    0x00474, 0x00475,
    0x00476, 0x00477,
    0x00478, 0x00479,
    0x0047a, 0x0047b,
    0x0047c, 0x0047d,
    0x0047e, 0x0047f,
    0x00480, 0x00481,
    0x0048a, 0x0048b,
    0x0048c, 0x0048d,
    0x0048e, 0x0048f,
    0x00490, 0x00491,
    0x00492, 0x00493,
    0x00494, 0x00495,
    0x00496, 0x00497,
    0x00498, 0x00499,
    0x0049a, 0x0049b,
    0x0049c, 0x0049d,
    0x0049e, 0x0049f,
    0x004a0, 0x004a1,
    0x004a2, 0x004a3,
    0x004a4, 0x004a5,
    0x004a6, 0x004a7,
    0x004a8, 0x004a9,
    0x004aa, 0x004ab,
    0x004ac, 0x004ad,
    0x004ae, 0x004af,
    0x004b0, 0x004b1,
    0x004b2, 0x004b3,
    0x004b4, 0x004b5,
    0x004b6, 0x004b7,
    0x004b8, 0x004b9,
    0x004ba, 0x004bb,
    0x004bc, 0x004bd,
    0x004be, 0x004bf,
    0x004c0, 0x004c2,
    0x004c3, 0x004c4,
    0x004c5, 0x004c6,
    0x004c7, 0x004c8,
    0x004c9, 0x004ca,
    0x004cb, 0x004cc,
    0x004cd, 0x004ce,
    0x004d0, 0x004d1,
    0x004d2, 0x004d3,
    0x004d4, 0x004d5,
    0x004d6, 0x004d7,
    0x004d8, 0x004d9,
    0x004da, 0x004db,
    0x004dc, 0x004dd,
    0x004de, 0x004df,
    0x004e0, 0x004e1,
    0x004e2, 0x004e3,
    0x004e4, 0x004e5,
    0x004e6, 0x004e7,
    0x004e8, 0x004e9,
    0x004ea, 0x004eb,
    0x004ec, 0x004ed,
    0x004ee, 0x004ef,
    0x004f0, 0x004f1,
    0x004f2, 0x004f3,
    0x004f4, 0x004f5,
    0x004f6, 0x004f7,
    0x004f8, 0x004f9,
    0x004fa, 0x004fb,
    0x004fc, 0x004fd,
    0x004fe, 0x004ff,
    0x00500, 0x00501,
    0x00502, 0x00503,
    0x00504, 0x00505,
    0x00506, 0x00507,
    0x00508, 0x00509,
    0x0050a, 0x0050b,
    0x0050c, 0x0050d,
    0x0050e, 0x0050f,
    0x00510, 0x00511,
    0x00512, 0x00513,
    0x00514, 0x00515,
    0x00516, 0x00517,
    0x00518, 0x00519,
    0x0051a, 0x0051b,
    0x0051c, 0x0051d,
    0x0051e, 0x0051f,
    0x00520, 0x00521,
    0x00522, 0x00523,
    0x00524, 0x00525,
    0x00526, 0x00527,
    0x00531, 0x00557,
    0x010a0, 0x010c6,
    0x01e00, 0x01e01,
    0x01e02, 0x01e03,
    0x01e04, 0x01e05,
    0x01e06, 0x01e07,
    0x01e08, 0x01e09,
    0x01e0a, 0x01e0b,
    0x01e0c, 0x01e0d,
    0x01e0e, 0x01e0f,
    0x01e10, 0x01e11,
    0x01e12, 0x01e13,
    0x01e14, 0x01e15,
    0x01e16, 0x01e17,
    0x01e18, 0x01e19,
    0x01e1a, 0x01e1b,
    0x01e1c, 0x01e1d,
    0x01e1e, 0x01e1f,
    0x01e20, 0x01e21,
    0x01e22, 0x01e23,
    0x01e24, 0x01e25,
    0x01e26, 0x01e27,
    0x01e28, 0x01e29,
    0x01e2a, 0x01e2b,
    0x01e2c, 0x01e2d,
    0x01e2e, 0x01e2f,
    0x01e30, 0x01e31,
    0x01e32, 0x01e33,
    0x01e34, 0x01e35,
    0x01e36, 0x01e37,
    0x01e38, 0x01e39,
    0x01e3a, 0x01e3b,
    0x01e3c, 0x01e3d,
    0x01e3e, 0x01e3f,
    0x01e40, 0x01e41,
    0x01e42, 0x01e43,
    0x01e44, 0x01e45,
    0x01e46, 0x01e47,
    0x01e48, 0x01e49,
    0x01e4a, 0x01e4b,
    0x01e4c, 0x01e4d,
    0x01e4e, 0x01e4f,
    0x01e50, 0x01e51,
    0x01e52, 0x01e53,
    0x01e54, 0x01e55,
    0x01e56, 0x01e57,
    0x01e58, 0x01e59,
    0x01e5a, 0x01e5b,
    0x01e5c, 0x01e5d,
    0x01e5e, 0x01e5f,
    0x01e60, 0x01e61,
    0x01e62, 0x01e63,
    0x01e64, 0x01e65,
    0x01e66, 0x01e67,
    0x01e68, 0x01e69,
    0x01e6a, 0x01e6b,
    0x01e6c, 0x01e6d,
    0x01e6e, 0x01e6f,
    0x01e70, 0x01e71,
    0x01e72, 0x01e73,
    0x01e74, 0x01e75,
    0x01e76, 0x01e77,
    0x01e78, 0x01e79,
    0x01e7a, 0x01e7b,
    0x01e7c, 0x01e7d,
    0x01e7e, 0x01e7f,
    0x01e80, 0x01e81,
    0x01e82, 0x01e83,
    0x01e84, 0x01e85,
    0x01e86, 0x01e87,
    0x01e88, 0x01e89,
    0x01e8a, 0x01e8b,
    0x01e8c, 0x01e8d,
    0x01e8e, 0x01e8f,
    0x01e90, 0x01e91,
    0x01e92, 0x01e93,
    0x01e94, 0x01e95,
    0x01e9e, 0x01e9f,
    0x01ea0, 0x01ea1,
    0x01ea2, 0x01ea3,
    0x01ea4, 0x01ea5,
    0x01ea6, 0x01ea7,
    0x01ea8, 0x01ea9,
    0x01eaa, 0x01eab,
    0x01eac, 0x01ead,
    0x01eae, 0x01eaf,
    0x01eb0, 0x01eb1,
    0x01eb2, 0x01eb3,
    0x01eb4, 0x01eb5,
    0x01eb6, 0x01eb7,
    0x01eb8, 0x01eb9,
    0x01eba, 0x01ebb,
    0x01ebc, 0x01ebd,
    0x01ebe, 0x01ebf,
    0x01ec0, 0x01ec1,
    0x01ec2, 0x01ec3,
    0x01ec4, 0x01ec5,
    0x01ec6, 0x01ec7,
    0x01ec8, 0x01ec9,
    0x01eca, 0x01ecb,
    0x01ecc, 0x01ecd,
    0x01ece, 0x01ecf,
    0x01ed0, 0x01ed1,
    0x01ed2, 0x01ed3,
    0x01ed4, 0x01ed5,
    0x01ed6, 0x01ed7,
    0x01ed8, 0x01ed9,
    0x01eda, 0x01edb,
    0x01edc, 0x01edd,
    0x01ede, 0x01edf,
    0x01ee0, 0x01ee1,
    0x01ee2, 0x01ee3,
    0x01ee4, 0x01ee5,
    0x01ee6, 0x01ee7,
    0x01ee8, 0x01ee9,
    0x01eea, 0x01eeb,
    0x01eec, 0x01eed,
    0x01eee, 0x01eef,
    0x01ef0, 0x01ef1,
    0x01ef2, 0x01ef3,
    0x01ef4, 0x01ef5,
    0x01ef6, 0x01ef7,
    0x01ef8, 0x01ef9,
    0x01efa, 0x01efb,
    0x01efc, 0x01efd,
    0x01efe, 0x01eff,
    0x01f08, 0x01f10,
    0x01f18, 0x01f1e,
    0x01f28, 0x01f30,
    0x01f38, 0x01f40,
    0x01f48, 0x01f4e,
    0x01f59, 0x01f5a,
    0x01f5b, 0x01f5c,
    0x01f5d, 0x01f5e,
    0x01f5f, 0x01f60,
    0x01f68, 0x01f70,
    0x01fb8, 0x01fbc,
    0x01fc8, 0x01fcc,
    0x01fd8, 0x01fdc,
    0x01fe8, 0x01fed,
    0x01ff8, 0x01ffc,
    0x02102, 0x02103,
    0x02107, 0x02108,
    0x0210b, 0x0210e,
    0x02110, 0x02113,
    0x02115, 0x02116,
    0x02119, 0x0211e,
    0x02124, 0x02125,
    0x02126, 0x02127,
    0x02128, 0x02129,
    0x0212a, 0x0212e,
    0x02130, 0x02134,
    0x0213e, 0x02140,
    0x02145, 0x02146,
    0x02183, 0x02184,
    0x02c00, 0x02c2f,
    0x02c60, 0x02c61,
    0x02c62, 0x02c65,
    0x02c67, 0x02c68,
    0x02c69, 0x02c6a,
    0x02c6b, 0x02c6c,
    0x02c6d, 0x02c71,
    0x02c72, 0x02c73,
    0x02c75, 0x02c76,
    0x02c7e, 0x02c81,
    0x02c82, 0x02c83,
    0x02c84, 0x02c85,
    0x02c86, 0x02c87,
    0x02c88, 0x02c89,
    0x02c8a, 0x02c8b,
    0x02c8c, 0x02c8d,
    0x02c8e, 0x02c8f,
    0x02c90, 0x02c91,
    0x02c92, 0x02c93,
    0x02c94, 0x02c95,
    0x02c96, 0x02c97,
    0x02c98, 0x02c99,
    0x02c9a, 0x02c9b,
    0x02c9c, 0x02c9d,
    0x02c9e, 0x02c9f,
    0x02ca0, 0x02ca1,
    0x02ca2, 0x02ca3,
    0x02ca4, 0x02ca5,
    0x02ca6, 0x02ca7,
    0x02ca8, 0x02ca9,
    0x02caa, 0x02cab,
    0x02cac, 0x02cad,
    0x02cae, 0x02caf,
    0x02cb0, 0x02cb1,
    0x02cb2, 0x02cb3,
    0x02cb4, 0x02cb5,
    0x02cb6, 0x02cb7,
    0x02cb8, 0x02cb9,
    0x02cba, 0x02cbb,
    0x02cbc, 0x02cbd,
    0x02cbe, 0x02cbf,
    0x02cc0, 0x02cc1,
    0x02cc2, 0x02cc3,
    0x02cc4, 0x02cc5,
    0x02cc6, 0x02cc7,
    0x02cc8, 0x02cc9,
    0x02cca, 0x02ccb,
    0x02ccc, 0x02ccd,
    0x02cce, 0x02ccf,
    0x02cd0, 0x02cd1,
    0x02cd2, 0x02cd3,
    0x02cd4, 0x02cd5,
    0x02cd6, 0x02cd7,
    0x02cd8, 0x02cd9,
    0x02cda, 0x02cdb,
    0x02cdc, 0x02cdd,
    0x02cde, 0x02cdf,
    0x02ce0, 0x02ce1,
    0x02ce2, 0x02ce3,
    0x02ceb, 0x02cec,
    0x02ced, 0x02cee,
    0x0a640, 0x0a641,
    0x0a642, 0x0a643,
    0x0a644, 0x0a645,
    0x0a646, 0x0a647,
    0x0a648, 0x0a649,
    0x0a64a, 0x0a64b,
    0x0a64c, 0x0a64d,
    0x0a64e, 0x0a64f,
    0x0a650, 0x0a651,
    0x0a652, 0x0a653,
    0x0a654, 0x0a655,
    0x0a656, 0x0a657,
    0x0a658, 0x0a659,
    0x0a65a, 0x0a65b,
    0x0a65c, 0x0a65d,
    0x0a65e, 0x0a65f,
    0x0a660, 0x0a661,
    0x0a662, 0x0a663,
    0x0a664, 0x0a665,
    0x0a666, 0x0a667,
    0x0a668, 0x0a669,
    0x0a66a, 0x0a66b,
    0x0a66c, 0x0a66d,
    0x0a680, 0x0a681,
    0x0a682, 0x0a683,
    0x0a684, 0x0a685,
    0x0a686, 0x0a687,
    0x0a688, 0x0a689,
    0x0a68a, 0x0a68b,
    0x0a68c, 0x0a68d,
    0x0a68e, 0x0a68f,
    0x0a690, 0x0a691,
    0x0a692, 0x0a693,
    0x0a694, 0x0a695,
    0x0a696, 0x0a697,
    0x0a722, 0x0a723,
    0x0a724, 0x0a725,
    0x0a726, 0x0a727,
    0x0a728, 0x0a729,
    0x0a72a, 0x0a72b,
    0x0a72c, 0x0a72d,
    0x0a72e, 0x0a72f,
    0x0a732, 0x0a733,
    0x0a734, 0x0a735,
    0x0a736, 0x0a737,
    0x0a738, 0x0a739,
    0x0a73a, 0x0a73b,
    0x0a73c, 0x0a73d,
    0x0a73e, 0x0a73f,
    0x0a740, 0x0a741,
    0x0a742, 0x0a743,
    0x0a744, 0x0a745,
    0x0a746, 0x0a747,
    0x0a748, 0x0a749,
    0x0a74a, 0x0a74b,
    0x0a74c, 0x0a74d,
    0x0a74e, 0x0a74f,
    0x0a750, 0x0a751,
    0x0a752, 0x0a753,
    0x0a754, 0x0a755,
    0x0a756, 0x0a757,
    0x0a758, 0x0a759,
    0x0a75a, 0x0a75b,
    0x0a75c, 0x0a75d,
    0x0a75e, 0x0a75f,
    0x0a760, 0x0a761,
    0x0a762, 0x0a763,
    0x0a764, 0x0a765,
    0x0a766, 0x0a767,
    0x0a768, 0x0a769,
    0x0a76a, 0x0a76b,
    0x0a76c, 0x0a76d,
    0x0a76e, 0x0a76f,
    0x0a779, 0x0a77a,
    0x0a77b, 0x0a77c,
    0x0a77d, 0x0a77f,
    0x0a780, 0x0a781,
    0x0a782, 0x0a783,
    0x0a784, 0x0a785,
    0x0a786, 0x0a787,
    0x0a78b, 0x0a78c,
    0x0a78d, 0x0a78e,
    0x0a790, 0x0a791,
    0x0a7a0, 0x0a7a1,
    0x0a7a2, 0x0a7a3,
    0x0a7a4, 0x0a7a5,
    0x0a7a6, 0x0a7a7,
    0x0a7a8, 0x0a7a9,
    0x0ff21, 0x0ff3b,
    0x10400, 0x10428,
    0x1d400, 0x1d41a,
    0x1d434, 0x1d44e,
    0x1d468, 0x1d482,
    0x1d49c, 0x1d49d,
    0x1d49e, 0x1d4a0,
    0x1d4a2, 0x1d4a3,
    0x1d4a5, 0x1d4a7,
    0x1d4a9, 0x1d4ad,
    0x1d4ae, 0x1d4b6,
    0x1d4d0, 0x1d4ea,
    0x1d504, 0x1d506,
    0x1d507, 0x1d50b,
    0x1d50d, 0x1d515,
    0x1d516, 0x1d51d,
    0x1d538, 0x1d53a,
    0x1d53b, 0x1d53f,
    0x1d540, 0x1d545,
    0x1d546, 0x1d547,
    0x1d54a, 0x1d551,
    0x1d56c, 0x1d586,
    0x1d5a0, 0x1d5ba,
    0x1d5d4, 0x1d5ee,
    0x1d608, 0x1d622,
    0x1d63c, 0x1d656,
    0x1d670, 0x1d68a,
    0x1d6a8, 0x1d6c1,
    0x1d6e2, 0x1d6fb,
    0x1d71c, 0x1d735,
    0x1d756, 0x1d76f,
    0x1d790, 0x1d7a9,
    0x1d7ca, 0x1d7cb,
]);

immutable(CodepointSet) unicodeAlphabetic = CodepointSet([
    0x00041, 0x0005b,
    0x00061, 0x0007b,
    0x000aa, 0x000ab,
    0x000b5, 0x000b6,
    0x000ba, 0x000bb,
    0x000c0, 0x000d7,
    0x000d8, 0x000f7,
    0x000f8, 0x002c2,
    0x002c6, 0x002d2,
    0x002e0, 0x002e5,
    0x002ec, 0x002ed,
    0x002ee, 0x002ef,
    0x00345, 0x00346,
    0x00370, 0x00375,
    0x00376, 0x00378,
    0x0037a, 0x0037e,
    0x00386, 0x00387,
    0x00388, 0x0038b,
    0x0038c, 0x0038d,
    0x0038e, 0x003a2,
    0x003a3, 0x003f6,
    0x003f7, 0x00482,
    0x0048a, 0x00528,
    0x00531, 0x00557,
    0x00559, 0x0055a,
    0x00561, 0x00588,
    0x005b0, 0x005be,
    0x005bf, 0x005c0,
    0x005c1, 0x005c3,
    0x005c4, 0x005c6,
    0x005c7, 0x005c8,
    0x005d0, 0x005eb,
    0x005f0, 0x005f3,
    0x00610, 0x0061b,
    0x00620, 0x00658,
    0x00659, 0x00660,
    0x0066e, 0x006d4,
    0x006d5, 0x006dd,
    0x006e1, 0x006e9,
    0x006ed, 0x006f0,
    0x006fa, 0x006fd,
    0x006ff, 0x00700,
    0x00710, 0x00740,
    0x0074d, 0x007b2,
    0x007ca, 0x007eb,
    0x007f4, 0x007f6,
    0x007fa, 0x007fb,
    0x00800, 0x00818,
    0x0081a, 0x0082d,
    0x00840, 0x00859,
    0x00900, 0x0093c,
    0x0093d, 0x0094d,
    0x0094e, 0x00951,
    0x00955, 0x00964,
    0x00971, 0x00978,
    0x00979, 0x00980,
    0x00981, 0x00984,
    0x00985, 0x0098d,
    0x0098f, 0x00991,
    0x00993, 0x009a9,
    0x009aa, 0x009b1,
    0x009b2, 0x009b3,
    0x009b6, 0x009ba,
    0x009bd, 0x009c5,
    0x009c7, 0x009c9,
    0x009cb, 0x009cd,
    0x009ce, 0x009cf,
    0x009d7, 0x009d8,
    0x009dc, 0x009de,
    0x009df, 0x009e4,
    0x009f0, 0x009f2,
    0x00a01, 0x00a04,
    0x00a05, 0x00a0b,
    0x00a0f, 0x00a11,
    0x00a13, 0x00a29,
    0x00a2a, 0x00a31,
    0x00a32, 0x00a34,
    0x00a35, 0x00a37,
    0x00a38, 0x00a3a,
    0x00a3e, 0x00a43,
    0x00a47, 0x00a49,
    0x00a4b, 0x00a4d,
    0x00a51, 0x00a52,
    0x00a59, 0x00a5d,
    0x00a5e, 0x00a5f,
    0x00a70, 0x00a76,
    0x00a81, 0x00a84,
    0x00a85, 0x00a8e,
    0x00a8f, 0x00a92,
    0x00a93, 0x00aa9,
    0x00aaa, 0x00ab1,
    0x00ab2, 0x00ab4,
    0x00ab5, 0x00aba,
    0x00abd, 0x00ac6,
    0x00ac7, 0x00aca,
    0x00acb, 0x00acd,
    0x00ad0, 0x00ad1,
    0x00ae0, 0x00ae4,
    0x00b01, 0x00b04,
    0x00b05, 0x00b0d,
    0x00b0f, 0x00b11,
    0x00b13, 0x00b29,
    0x00b2a, 0x00b31,
    0x00b32, 0x00b34,
    0x00b35, 0x00b3a,
    0x00b3d, 0x00b45,
    0x00b47, 0x00b49,
    0x00b4b, 0x00b4d,
    0x00b56, 0x00b58,
    0x00b5c, 0x00b5e,
    0x00b5f, 0x00b64,
    0x00b71, 0x00b72,
    0x00b82, 0x00b84,
    0x00b85, 0x00b8b,
    0x00b8e, 0x00b91,
    0x00b92, 0x00b96,
    0x00b99, 0x00b9b,
    0x00b9c, 0x00b9d,
    0x00b9e, 0x00ba0,
    0x00ba3, 0x00ba5,
    0x00ba8, 0x00bab,
    0x00bae, 0x00bba,
    0x00bbe, 0x00bc3,
    0x00bc6, 0x00bc9,
    0x00bca, 0x00bcd,
    0x00bd0, 0x00bd1,
    0x00bd7, 0x00bd8,
    0x00c01, 0x00c04,
    0x00c05, 0x00c0d,
    0x00c0e, 0x00c11,
    0x00c12, 0x00c29,
    0x00c2a, 0x00c34,
    0x00c35, 0x00c3a,
    0x00c3d, 0x00c45,
    0x00c46, 0x00c49,
    0x00c4a, 0x00c4d,
    0x00c55, 0x00c57,
    0x00c58, 0x00c5a,
    0x00c60, 0x00c64,
    0x00c82, 0x00c84,
    0x00c85, 0x00c8d,
    0x00c8e, 0x00c91,
    0x00c92, 0x00ca9,
    0x00caa, 0x00cb4,
    0x00cb5, 0x00cba,
    0x00cbd, 0x00cc5,
    0x00cc6, 0x00cc9,
    0x00cca, 0x00ccd,
    0x00cd5, 0x00cd7,
    0x00cde, 0x00cdf,
    0x00ce0, 0x00ce4,
    0x00cf1, 0x00cf3,
    0x00d02, 0x00d04,
    0x00d05, 0x00d0d,
    0x00d0e, 0x00d11,
    0x00d12, 0x00d3b,
    0x00d3d, 0x00d45,
    0x00d46, 0x00d49,
    0x00d4a, 0x00d4d,
    0x00d4e, 0x00d4f,
    0x00d57, 0x00d58,
    0x00d60, 0x00d64,
    0x00d7a, 0x00d80,
    0x00d82, 0x00d84,
    0x00d85, 0x00d97,
    0x00d9a, 0x00db2,
    0x00db3, 0x00dbc,
    0x00dbd, 0x00dbe,
    0x00dc0, 0x00dc7,
    0x00dcf, 0x00dd5,
    0x00dd6, 0x00dd7,
    0x00dd8, 0x00de0,
    0x00df2, 0x00df4,
    0x00e01, 0x00e3b,
    0x00e40, 0x00e47,
    0x00e4d, 0x00e4e,
    0x00e81, 0x00e83,
    0x00e84, 0x00e85,
    0x00e87, 0x00e89,
    0x00e8a, 0x00e8b,
    0x00e8d, 0x00e8e,
    0x00e94, 0x00e98,
    0x00e99, 0x00ea0,
    0x00ea1, 0x00ea4,
    0x00ea5, 0x00ea6,
    0x00ea7, 0x00ea8,
    0x00eaa, 0x00eac,
    0x00ead, 0x00eba,
    0x00ebb, 0x00ebe,
    0x00ec0, 0x00ec5,
    0x00ec6, 0x00ec7,
    0x00ecd, 0x00ece,
    0x00edc, 0x00ede,
    0x00f00, 0x00f01,
    0x00f40, 0x00f48,
    0x00f49, 0x00f6d,
    0x00f71, 0x00f82,
    0x00f88, 0x00f98,
    0x00f99, 0x00fbd,
    0x01000, 0x01037,
    0x01038, 0x01039,
    0x0103b, 0x01040,
    0x01050, 0x01063,
    0x01065, 0x01069,
    0x0106e, 0x01087,
    0x0108e, 0x0108f,
    0x0109c, 0x0109e,
    0x010a0, 0x010c6,
    0x010d0, 0x010fb,
    0x010fc, 0x010fd,
    0x01100, 0x01249,
    0x0124a, 0x0124e,
    0x01250, 0x01257,
    0x01258, 0x01259,
    0x0125a, 0x0125e,
    0x01260, 0x01289,
    0x0128a, 0x0128e,
    0x01290, 0x012b1,
    0x012b2, 0x012b6,
    0x012b8, 0x012bf,
    0x012c0, 0x012c1,
    0x012c2, 0x012c6,
    0x012c8, 0x012d7,
    0x012d8, 0x01311,
    0x01312, 0x01316,
    0x01318, 0x0135b,
    0x0135f, 0x01360,
    0x01380, 0x01390,
    0x013a0, 0x013f5,
    0x01401, 0x0166d,
    0x0166f, 0x01680,
    0x01681, 0x0169b,
    0x016a0, 0x016eb,
    0x016ee, 0x016f1,
    0x01700, 0x0170d,
    0x0170e, 0x01714,
    0x01720, 0x01734,
    0x01740, 0x01754,
    0x01760, 0x0176d,
    0x0176e, 0x01771,
    0x01772, 0x01774,
    0x01780, 0x017b4,
    0x017b6, 0x017c9,
    0x017d7, 0x017d8,
    0x017dc, 0x017dd,
    0x01820, 0x01878,
    0x01880, 0x018ab,
    0x018b0, 0x018f6,
    0x01900, 0x0191d,
    0x01920, 0x0192c,
    0x01930, 0x01939,
    0x01950, 0x0196e,
    0x01970, 0x01975,
    0x01980, 0x019ac,
    0x019b0, 0x019ca,
    0x01a00, 0x01a1c,
    0x01a20, 0x01a5f,
    0x01a61, 0x01a75,
    0x01aa7, 0x01aa8,
    0x01b00, 0x01b34,
    0x01b35, 0x01b44,
    0x01b45, 0x01b4c,
    0x01b80, 0x01baa,
    0x01bae, 0x01bb0,
    0x01bc0, 0x01be6,
    0x01be7, 0x01bf2,
    0x01c00, 0x01c36,
    0x01c4d, 0x01c50,
    0x01c5a, 0x01c7e,
    0x01ce9, 0x01ced,
    0x01cee, 0x01cf3,
    0x01d00, 0x01dc0,
    0x01e00, 0x01f16,
    0x01f18, 0x01f1e,
    0x01f20, 0x01f46,
    0x01f48, 0x01f4e,
    0x01f50, 0x01f58,
    0x01f59, 0x01f5a,
    0x01f5b, 0x01f5c,
    0x01f5d, 0x01f5e,
    0x01f5f, 0x01f7e,
    0x01f80, 0x01fb5,
    0x01fb6, 0x01fbd,
    0x01fbe, 0x01fbf,
    0x01fc2, 0x01fc5,
    0x01fc6, 0x01fcd,
    0x01fd0, 0x01fd4,
    0x01fd6, 0x01fdc,
    0x01fe0, 0x01fed,
    0x01ff2, 0x01ff5,
    0x01ff6, 0x01ffd,
    0x02071, 0x02072,
    0x0207f, 0x02080,
    0x02090, 0x0209d,
    0x02102, 0x02103,
    0x02107, 0x02108,
    0x0210a, 0x02114,
    0x02115, 0x02116,
    0x02119, 0x0211e,
    0x02124, 0x02125,
    0x02126, 0x02127,
    0x02128, 0x02129,
    0x0212a, 0x0212e,
    0x0212f, 0x0213a,
    0x0213c, 0x02140,
    0x02145, 0x0214a,
    0x0214e, 0x0214f,
    0x02160, 0x02189,
    0x024b6, 0x024ea,
    0x02c00, 0x02c2f,
    0x02c30, 0x02c5f,
    0x02c60, 0x02ce5,
    0x02ceb, 0x02cef,
    0x02d00, 0x02d26,
    0x02d30, 0x02d66,
    0x02d6f, 0x02d70,
    0x02d80, 0x02d97,
    0x02da0, 0x02da7,
    0x02da8, 0x02daf,
    0x02db0, 0x02db7,
    0x02db8, 0x02dbf,
    0x02dc0, 0x02dc7,
    0x02dc8, 0x02dcf,
    0x02dd0, 0x02dd7,
    0x02dd8, 0x02ddf,
    0x02de0, 0x02e00,
    0x02e2f, 0x02e30,
    0x03005, 0x03008,
    0x03021, 0x0302a,
    0x03031, 0x03036,
    0x03038, 0x0303d,
    0x03041, 0x03097,
    0x0309d, 0x030a0,
    0x030a1, 0x030fb,
    0x030fc, 0x03100,
    0x03105, 0x0312e,
    0x03131, 0x0318f,
    0x031a0, 0x031bb,
    0x031f0, 0x03200,
    0x03400, 0x04db6,
    0x04e00, 0x09fcc,
    0x0a000, 0x0a48d,
    0x0a4d0, 0x0a4fe,
    0x0a500, 0x0a60d,
    0x0a610, 0x0a620,
    0x0a62a, 0x0a62c,
    0x0a640, 0x0a66f,
    0x0a67f, 0x0a698,
    0x0a6a0, 0x0a6f0,
    0x0a717, 0x0a720,
    0x0a722, 0x0a789,
    0x0a78b, 0x0a78f,
    0x0a790, 0x0a792,
    0x0a7a0, 0x0a7aa,
    0x0a7fa, 0x0a802,
    0x0a803, 0x0a806,
    0x0a807, 0x0a80b,
    0x0a80c, 0x0a828,
    0x0a840, 0x0a874,
    0x0a880, 0x0a8c4,
    0x0a8f2, 0x0a8f8,
    0x0a8fb, 0x0a8fc,
    0x0a90a, 0x0a92b,
    0x0a930, 0x0a953,
    0x0a960, 0x0a97d,
    0x0a980, 0x0a9b3,
    0x0a9b4, 0x0a9c0,
    0x0a9cf, 0x0a9d0,
    0x0aa00, 0x0aa37,
    0x0aa40, 0x0aa4e,
    0x0aa60, 0x0aa77,
    0x0aa7a, 0x0aa7b,
    0x0aa80, 0x0aabf,
    0x0aac0, 0x0aac1,
    0x0aac2, 0x0aac3,
    0x0aadb, 0x0aade,
    0x0ab01, 0x0ab07,
    0x0ab09, 0x0ab0f,
    0x0ab11, 0x0ab17,
    0x0ab20, 0x0ab27,
    0x0ab28, 0x0ab2f,
    0x0abc0, 0x0abeb,
    0x0ac00, 0x0d7a4,
    0x0d7b0, 0x0d7c7,
    0x0d7cb, 0x0d7fc,
    0x0f900, 0x0fa2e,
    0x0fa30, 0x0fa6e,
    0x0fa70, 0x0fada,
    0x0fb00, 0x0fb07,
    0x0fb13, 0x0fb18,
    0x0fb1d, 0x0fb29,
    0x0fb2a, 0x0fb37,
    0x0fb38, 0x0fb3d,
    0x0fb3e, 0x0fb3f,
    0x0fb40, 0x0fb42,
    0x0fb43, 0x0fb45,
    0x0fb46, 0x0fbb2,
    0x0fbd3, 0x0fd3e,
    0x0fd50, 0x0fd90,
    0x0fd92, 0x0fdc8,
    0x0fdf0, 0x0fdfc,
    0x0fe70, 0x0fe75,
    0x0fe76, 0x0fefd,
    0x0ff21, 0x0ff3b,
    0x0ff41, 0x0ff5b,
    0x0ff66, 0x0ffbf,
    0x0ffc2, 0x0ffc8,
    0x0ffca, 0x0ffd0,
    0x0ffd2, 0x0ffd8,
    0x0ffda, 0x0ffdd,
    0x10000, 0x1000c,
    0x1000d, 0x10027,
    0x10028, 0x1003b,
    0x1003c, 0x1003e,
    0x1003f, 0x1004e,
    0x10050, 0x1005e,
    0x10080, 0x100fb,
    0x10140, 0x10175,
    0x10280, 0x1029d,
    0x102a0, 0x102d1,
    0x10300, 0x1031f,
    0x10330, 0x1034b,
    0x10380, 0x1039e,
    0x103a0, 0x103c4,
    0x103c8, 0x103d0,
    0x103d1, 0x103d6,
    0x10400, 0x1049e,
    0x10800, 0x10806,
    0x10808, 0x10809,
    0x1080a, 0x10836,
    0x10837, 0x10839,
    0x1083c, 0x1083d,
    0x1083f, 0x10856,
    0x10900, 0x10916,
    0x10920, 0x1093a,
    0x10a00, 0x10a04,
    0x10a05, 0x10a07,
    0x10a0c, 0x10a14,
    0x10a15, 0x10a18,
    0x10a19, 0x10a34,
    0x10a60, 0x10a7d,
    0x10b00, 0x10b36,
    0x10b40, 0x10b56,
    0x10b60, 0x10b73,
    0x10c00, 0x10c49,
    0x11000, 0x11046,
    0x11082, 0x110b9,
    0x12000, 0x1236f,
    0x12400, 0x12463,
    0x13000, 0x1342f,
    0x16800, 0x16a39,
    0x1b000, 0x1b002,
    0x1d400, 0x1d455,
    0x1d456, 0x1d49d,
    0x1d49e, 0x1d4a0,
    0x1d4a2, 0x1d4a3,
    0x1d4a5, 0x1d4a7,
    0x1d4a9, 0x1d4ad,
    0x1d4ae, 0x1d4ba,
    0x1d4bb, 0x1d4bc,
    0x1d4bd, 0x1d4c4,
    0x1d4c5, 0x1d506,
    0x1d507, 0x1d50b,
    0x1d50d, 0x1d515,
    0x1d516, 0x1d51d,
    0x1d51e, 0x1d53a,
    0x1d53b, 0x1d53f,
    0x1d540, 0x1d545,
    0x1d546, 0x1d547,
    0x1d54a, 0x1d551,
    0x1d552, 0x1d6a6,
    0x1d6a8, 0x1d6c1,
    0x1d6c2, 0x1d6db,
    0x1d6dc, 0x1d6fb,
    0x1d6fc, 0x1d715,
    0x1d716, 0x1d735,
    0x1d736, 0x1d74f,
    0x1d750, 0x1d76f,
    0x1d770, 0x1d789,
    0x1d78a, 0x1d7a9,
    0x1d7aa, 0x1d7c3,
    0x1d7c4, 0x1d7cc,
    0x20000, 0x2a6d7,
    0x2a700, 0x2b735,
    0x2b740, 0x2b81e,
    0x2f800, 0x2fa1e,
]);

immutable(CodepointSet) unicodeMc = CodepointSet([
    0x00903, 0x00904,
    0x0093b, 0x0093c,
    0x0093e, 0x00941,
    0x00949, 0x0094d,
    0x0094e, 0x00950,
    0x00982, 0x00984,
    0x009be, 0x009c1,
    0x009c7, 0x009c9,
    0x009cb, 0x009cd,
    0x009d7, 0x009d8,
    0x00a03, 0x00a04,
    0x00a3e, 0x00a41,
    0x00a83, 0x00a84,
    0x00abe, 0x00ac1,
    0x00ac9, 0x00aca,
    0x00acb, 0x00acd,
    0x00b02, 0x00b04,
    0x00b3e, 0x00b3f,
    0x00b40, 0x00b41,
    0x00b47, 0x00b49,
    0x00b4b, 0x00b4d,
    0x00b57, 0x00b58,
    0x00bbe, 0x00bc0,
    0x00bc1, 0x00bc3,
    0x00bc6, 0x00bc9,
    0x00bca, 0x00bcd,
    0x00bd7, 0x00bd8,
    0x00c01, 0x00c04,
    0x00c41, 0x00c45,
    0x00c82, 0x00c84,
    0x00cbe, 0x00cbf,
    0x00cc0, 0x00cc5,
    0x00cc7, 0x00cc9,
    0x00cca, 0x00ccc,
    0x00cd5, 0x00cd7,
    0x00d02, 0x00d04,
    0x00d3e, 0x00d41,
    0x00d46, 0x00d49,
    0x00d4a, 0x00d4d,
    0x00d57, 0x00d58,
    0x00d82, 0x00d84,
    0x00dcf, 0x00dd2,
    0x00dd8, 0x00de0,
    0x00df2, 0x00df4,
    0x00f3e, 0x00f40,
    0x00f7f, 0x00f80,
    0x0102b, 0x0102d,
    0x01031, 0x01032,
    0x01038, 0x01039,
    0x0103b, 0x0103d,
    0x01056, 0x01058,
    0x01062, 0x01065,
    0x01067, 0x0106e,
    0x01083, 0x01085,
    0x01087, 0x0108d,
    0x0108f, 0x01090,
    0x0109a, 0x0109d,
    0x017b6, 0x017b7,
    0x017be, 0x017c6,
    0x017c7, 0x017c9,
    0x01923, 0x01927,
    0x01929, 0x0192c,
    0x01930, 0x01932,
    0x01933, 0x01939,
    0x019b0, 0x019c1,
    0x019c8, 0x019ca,
    0x01a19, 0x01a1c,
    0x01a55, 0x01a56,
    0x01a57, 0x01a58,
    0x01a61, 0x01a62,
    0x01a63, 0x01a65,
    0x01a6d, 0x01a73,
    0x01b04, 0x01b05,
    0x01b35, 0x01b36,
    0x01b3b, 0x01b3c,
    0x01b3d, 0x01b42,
    0x01b43, 0x01b45,
    0x01b82, 0x01b83,
    0x01ba1, 0x01ba2,
    0x01ba6, 0x01ba8,
    0x01baa, 0x01bab,
    0x01be7, 0x01be8,
    0x01bea, 0x01bed,
    0x01bee, 0x01bef,
    0x01bf2, 0x01bf4,
    0x01c24, 0x01c2c,
    0x01c34, 0x01c36,
    0x01ce1, 0x01ce2,
    0x01cf2, 0x01cf3,
    0x0a823, 0x0a825,
    0x0a827, 0x0a828,
    0x0a880, 0x0a882,
    0x0a8b4, 0x0a8c4,
    0x0a952, 0x0a954,
    0x0a983, 0x0a984,
    0x0a9b4, 0x0a9b6,
    0x0a9ba, 0x0a9bc,
    0x0a9bd, 0x0a9c1,
    0x0aa2f, 0x0aa31,
    0x0aa33, 0x0aa35,
    0x0aa4d, 0x0aa4e,
    0x0aa7b, 0x0aa7c,
    0x0abe3, 0x0abe5,
    0x0abe6, 0x0abe8,
    0x0abe9, 0x0abeb,
    0x0abec, 0x0abed,
    0x11000, 0x11001,
    0x11002, 0x11003,
    0x11082, 0x11083,
    0x110b0, 0x110b3,
    0x110b7, 0x110b9,
    0x1d165, 0x1d167,
    0x1d16d, 0x1d173,
]);

immutable(CodepointSet) unicodeMe = CodepointSet([
    0x00488, 0x0048a,
    0x020dd, 0x020e1,
    0x020e2, 0x020e5,
    0x0a670, 0x0a673,
]);

immutable(CodepointSet) unicodeMn = CodepointSet([
    0x00300, 0x00370,
    0x00483, 0x00488,
    0x00591, 0x005be,
    0x005bf, 0x005c0,
    0x005c1, 0x005c3,
    0x005c4, 0x005c6,
    0x005c7, 0x005c8,
    0x00610, 0x0061b,
    0x0064b, 0x00660,
    0x00670, 0x00671,
    0x006d6, 0x006dd,
    0x006df, 0x006e5,
    0x006e7, 0x006e9,
    0x006ea, 0x006ee,
    0x00711, 0x00712,
    0x00730, 0x0074b,
    0x007a6, 0x007b1,
    0x007eb, 0x007f4,
    0x00816, 0x0081a,
    0x0081b, 0x00824,
    0x00825, 0x00828,
    0x00829, 0x0082e,
    0x00859, 0x0085c,
    0x00900, 0x00903,
    0x0093a, 0x0093b,
    0x0093c, 0x0093d,
    0x00941, 0x00949,
    0x0094d, 0x0094e,
    0x00951, 0x00958,
    0x00962, 0x00964,
    0x00981, 0x00982,
    0x009bc, 0x009bd,
    0x009c1, 0x009c5,
    0x009cd, 0x009ce,
    0x009e2, 0x009e4,
    0x00a01, 0x00a03,
    0x00a3c, 0x00a3d,
    0x00a41, 0x00a43,
    0x00a47, 0x00a49,
    0x00a4b, 0x00a4e,
    0x00a51, 0x00a52,
    0x00a70, 0x00a72,
    0x00a75, 0x00a76,
    0x00a81, 0x00a83,
    0x00abc, 0x00abd,
    0x00ac1, 0x00ac6,
    0x00ac7, 0x00ac9,
    0x00acd, 0x00ace,
    0x00ae2, 0x00ae4,
    0x00b01, 0x00b02,
    0x00b3c, 0x00b3d,
    0x00b3f, 0x00b40,
    0x00b41, 0x00b45,
    0x00b4d, 0x00b4e,
    0x00b56, 0x00b57,
    0x00b62, 0x00b64,
    0x00b82, 0x00b83,
    0x00bc0, 0x00bc1,
    0x00bcd, 0x00bce,
    0x00c3e, 0x00c41,
    0x00c46, 0x00c49,
    0x00c4a, 0x00c4e,
    0x00c55, 0x00c57,
    0x00c62, 0x00c64,
    0x00cbc, 0x00cbd,
    0x00cbf, 0x00cc0,
    0x00cc6, 0x00cc7,
    0x00ccc, 0x00cce,
    0x00ce2, 0x00ce4,
    0x00d41, 0x00d45,
    0x00d4d, 0x00d4e,
    0x00d62, 0x00d64,
    0x00dca, 0x00dcb,
    0x00dd2, 0x00dd5,
    0x00dd6, 0x00dd7,
    0x00e31, 0x00e32,
    0x00e34, 0x00e3b,
    0x00e47, 0x00e4f,
    0x00eb1, 0x00eb2,
    0x00eb4, 0x00eba,
    0x00ebb, 0x00ebd,
    0x00ec8, 0x00ece,
    0x00f18, 0x00f1a,
    0x00f35, 0x00f36,
    0x00f37, 0x00f38,
    0x00f39, 0x00f3a,
    0x00f71, 0x00f7f,
    0x00f80, 0x00f85,
    0x00f86, 0x00f88,
    0x00f8d, 0x00f98,
    0x00f99, 0x00fbd,
    0x00fc6, 0x00fc7,
    0x0102d, 0x01031,
    0x01032, 0x01038,
    0x01039, 0x0103b,
    0x0103d, 0x0103f,
    0x01058, 0x0105a,
    0x0105e, 0x01061,
    0x01071, 0x01075,
    0x01082, 0x01083,
    0x01085, 0x01087,
    0x0108d, 0x0108e,
    0x0109d, 0x0109e,
    0x0135d, 0x01360,
    0x01712, 0x01715,
    0x01732, 0x01735,
    0x01752, 0x01754,
    0x01772, 0x01774,
    0x017b7, 0x017be,
    0x017c6, 0x017c7,
    0x017c9, 0x017d4,
    0x017dd, 0x017de,
    0x0180b, 0x0180e,
    0x018a9, 0x018aa,
    0x01920, 0x01923,
    0x01927, 0x01929,
    0x01932, 0x01933,
    0x01939, 0x0193c,
    0x01a17, 0x01a19,
    0x01a56, 0x01a57,
    0x01a58, 0x01a5f,
    0x01a60, 0x01a61,
    0x01a62, 0x01a63,
    0x01a65, 0x01a6d,
    0x01a73, 0x01a7d,
    0x01a7f, 0x01a80,
    0x01b00, 0x01b04,
    0x01b34, 0x01b35,
    0x01b36, 0x01b3b,
    0x01b3c, 0x01b3d,
    0x01b42, 0x01b43,
    0x01b6b, 0x01b74,
    0x01b80, 0x01b82,
    0x01ba2, 0x01ba6,
    0x01ba8, 0x01baa,
    0x01be6, 0x01be7,
    0x01be8, 0x01bea,
    0x01bed, 0x01bee,
    0x01bef, 0x01bf2,
    0x01c2c, 0x01c34,
    0x01c36, 0x01c38,
    0x01cd0, 0x01cd3,
    0x01cd4, 0x01ce1,
    0x01ce2, 0x01ce9,
    0x01ced, 0x01cee,
    0x01dc0, 0x01de7,
    0x01dfc, 0x01e00,
    0x020d0, 0x020dd,
    0x020e1, 0x020e2,
    0x020e5, 0x020f1,
    0x02cef, 0x02cf2,
    0x02d7f, 0x02d80,
    0x02de0, 0x02e00,
    0x0302a, 0x03030,
    0x03099, 0x0309b,
    0x0a66f, 0x0a670,
    0x0a67c, 0x0a67e,
    0x0a6f0, 0x0a6f2,
    0x0a802, 0x0a803,
    0x0a806, 0x0a807,
    0x0a80b, 0x0a80c,
    0x0a825, 0x0a827,
    0x0a8c4, 0x0a8c5,
    0x0a8e0, 0x0a8f2,
    0x0a926, 0x0a92e,
    0x0a947, 0x0a952,
    0x0a980, 0x0a983,
    0x0a9b3, 0x0a9b4,
    0x0a9b6, 0x0a9ba,
    0x0a9bc, 0x0a9bd,
    0x0aa29, 0x0aa2f,
    0x0aa31, 0x0aa33,
    0x0aa35, 0x0aa37,
    0x0aa43, 0x0aa44,
    0x0aa4c, 0x0aa4d,
    0x0aab0, 0x0aab1,
    0x0aab2, 0x0aab5,
    0x0aab7, 0x0aab9,
    0x0aabe, 0x0aac0,
    0x0aac1, 0x0aac2,
    0x0abe5, 0x0abe6,
    0x0abe8, 0x0abe9,
    0x0abed, 0x0abee,
    0x0fb1e, 0x0fb1f,
    0x0fe00, 0x0fe10,
    0x0fe20, 0x0fe27,
    0x101fd, 0x101fe,
    0x10a01, 0x10a04,
    0x10a05, 0x10a07,
    0x10a0c, 0x10a10,
    0x10a38, 0x10a3b,
    0x10a3f, 0x10a40,
    0x11001, 0x11002,
    0x11038, 0x11047,
    0x11080, 0x11082,
    0x110b3, 0x110b7,
    0x110b9, 0x110bb,
    0x1d167, 0x1d16a,
    0x1d17b, 0x1d183,
    0x1d185, 0x1d18c,
    0x1d1aa, 0x1d1ae,
    0x1d242, 0x1d245,
    0xe0100, 0xe01f0,
]);


immutable(CodepointSet) unicodeNd = CodepointSet([
    0x00030, 0x0003a,
    0x00660, 0x0066a,
    0x006f0, 0x006fa,
    0x007c0, 0x007ca,
    0x00966, 0x00970,
    0x009e6, 0x009f0,
    0x00a66, 0x00a70,
    0x00ae6, 0x00af0,
    0x00b66, 0x00b70,
    0x00be6, 0x00bf0,
    0x00c66, 0x00c70,
    0x00ce6, 0x00cf0,
    0x00d66, 0x00d70,
    0x00e50, 0x00e5a,
    0x00ed0, 0x00eda,
    0x00f20, 0x00f2a,
    0x01040, 0x0104a,
    0x01090, 0x0109a,
    0x017e0, 0x017ea,
    0x01810, 0x0181a,
    0x01946, 0x01950,
    0x019d0, 0x019da,
    0x01a80, 0x01a8a,
    0x01a90, 0x01a9a,
    0x01b50, 0x01b5a,
    0x01bb0, 0x01bba,
    0x01c40, 0x01c4a,
    0x01c50, 0x01c5a,
    0x0a620, 0x0a62a,
    0x0a8d0, 0x0a8da,
    0x0a900, 0x0a90a,
    0x0a9d0, 0x0a9da,
    0x0aa50, 0x0aa5a,
    0x0abf0, 0x0abfa,
    0x0ff10, 0x0ff1a,
    0x104a0, 0x104aa,
    0x11066, 0x11070,
    0x1d7ce, 0x1d800,
]);

immutable(CodepointSet) unicodePc = CodepointSet([
    0x0005f, 0x00060,
    0x0203f, 0x02041,
    0x02054, 0x02055,
    0x0fe33, 0x0fe35,
    0x0fe4d, 0x0fe50,
    0x0ff3f, 0x0ff40,
]);
	+/